name: Deploy to Google Cloud

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21.5']

    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      # You can test your matrix by printing the current Go version
      - name: Display Go version
        run: go version
      - name: Install dependencies
        run: |
          go get github.com/mailjet/mailjet-apiv3-go
          go get github.com/go-redis/redis/v8
          go get cloud.google.com/go/secretmanager/apiv1
          go get google.golang.org/genproto/googleapis/cloud/secretmanager/v1
      - name: Build
        run: go build -v ./...
      - name: Test with the Go CLI
        run: go test      

  deploy:
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDP }}}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2


    - name: Set environment variables on GCE
      run: |
        gcloud compute instances add-metadata ${{ secrets.INSTANCE_NAME }} \
          --zone ${{ secrets.INSTANCE_ZONE }} \
          --metadata DB_URL=${{ secrets.DB_URL }},DB_PORT=${{ secrets.DB_PORT }}, SERVER_PORT=${{ secrets.SERVER_PORT }},MAIL_SERVER_API_KEY=${{ secrets.MAIL_SERVER_API_KEY }},MAIL_SERVER_API_SECRET=${{ secrets.MAIL_SERVER_API_SECRET }},FROM_EMAIL=${{ secrets.FROM_EMAIL }}

    - name: Create and run startup script
      run: |
        echo '#!/bin/bash' > startup-script.sh
        echo 'DB_URL=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/DB_URL)' >> startup-script.sh
        echo 'export DB_URL' >> startup-script.sh
        echo 'DB_PORT=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/DB_PORT)' >> startup-script.sh
        echo 'export DB_PORT' >> startup-script.sh
        echo 'SERVER_PORT=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/SERVER_PORT)' >> startup-script.sh
        echo 'export SERVER_PORT' >> startup-script.sh
        echo 'MAIL_SERVER_API_KEY=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/MAIL_SERVER_API_KEY)' >> startup-script.sh
        echo 'export MAIL_SERVER_API_KEY' >> startup-script.sh
        echo 'MAIL_SERVER_API_SECRET=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/MAIL_SERVER_API_SECRET)' >> startup-script.sh
        echo 'export MAIL_SERVER_API_SECRET' >> startup-script.sh
        echo 'FROM_EMAIL=$(curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/FROM_EMAIL)' >> startup-script.sh
        echo 'export FROM_EMAIL' >> startup-script.sh
        cat startup-script.sh | gcloud compute ssh ${{ secrets.INSTANCE_NAME }} --zone ${{ secrets.INSTANCE_ZONE }} -- 'cat > startup-script.sh && chmod +x startup-script.sh'
        echo '~/startup-script.sh' | gcloud compute ssh ${{ secrets.INSTANCE_NAME }} --zone ${{ secrets.INSTANCE_ZONE }} -- 'sudo tee -a /etc/rc.local'

        echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
        chmod 600 id_rsa
        ssh -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.GCE_USER }}@${{ secrets.GCE_IP }} << EOF
          git clone https://github.com/canatac/effective-umbrella.git
          cd effective-umbrella
          go build -o server && ./server
        EOF
            echo 'cd ~/effective-umbrella && ~/go build -o server && ./server' | gcloud compute ssh ${{ secrets.INSTANCE_NAME }} --zone ${{ secrets.INSTANCE_ZONE }} -- 'sudo tee -a /etc/rc.local'